name: GitHub Actions Demo
run-name: ${{ github.actor }} is deploying to QA org 🚀
# Definition when the workflow should run
on:
    push:
      branches: [ QA ]
      paths:
        - 'force-app/**'
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3

      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the Source code from the latest commit
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install NPM
        run: |
          npm install
          
      - name: 'Read PR Body'
        env:
            # The pull request body is available through the github context object
            # we put the body of the pull request in an env variable (only available to this step)
            PR_BODY: ${{github.event.pull_request.body}}

          # Here we print the content of the environment variable and
          # pipe to a a text file.

          # Then we call the local script parsePR.js, which will create
          # a new file called testsToRun.txt. This file will have the list
          # of tests to run separated by a comma

          # Finally, we add the list of tests to the $GITHUB_ENV variable
          # as this allows us to reference the list in a subsequent step.  If you
          # were using a normal env variable, its value would not be available outside this step.
        run: |
              echo $PR_BODY > ./pr_body.txt
              node ./parsePR.js              
              TESTS=$(cat testsToRun.txt)       
              echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
          
          
      # Install the SFDX CLI using npm command
      - name: Install the SFDX CLI
        run: |
          npm install sfdx-cli --global
          sfdx force --help
    
      - name: 'Installing sfdx git delta'
        run: | 
            echo y | sfdx plugins:install sfdx-git-delta
            sfdx plugins    
          
      - name: Decrypt the server.key.enc file & store inside assets folder
        run: |
          openssl enc -nosalt -aes-256-cbc -in server.key -out server.key.enc -base64 -K DE3B4F6346E0CFA95CA695168A0FD8DA4D06AE808A0AFA9A4DBD2502D5DD6FE7 -iv AC767FEDCF2105140E84B62495C3F43A
          
      - name: Authenticate
        run: | 
            sfdx force:auth:jwt:grant --clientid 3MVG9u0ll7_j5qFydUsaG3pn67MjNxDp0Kwk.d7SHcxQjMn1EM3Wysnm4cEdJAtKXuKNuYQIEtQ== --jwtkeyfile server.key --username cicd.user@manras.com.qa.tatadigital --setdefaultdevhubusername -a HubOrg 
            
#      - name: Validate the package
#        run: |
#            sfdx force:source:deploy -p force-app -c -u HubOrg
            
        # We use SFDX Git Delta to create a directory with only the metadata that has changed.
        # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
        # This helps reducing deployment times
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: | 
              mkdir changed-sources
              sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 


      #- name: 'Deploy changes'
      # run: |
      #       sfdx force:source:deploy -x "changed-sources/force-app" RunSpecifiedTests --runtests ${{env.APEX_TESTS}} -c -l -u HubOrg
              
      - name: 'Deploy the Package to the QA Org'
        uses: /cicddemo/quickDeployment@QA
        if: ${{ steps.validatePackage.outputs.job_id != '0' }}
        with:
          job_id: ${{ steps.validatePackage.outputs.job_id }}
              

      - name: 'Deploy destructive changes (if any)'
        run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings -c -u HubOrg
